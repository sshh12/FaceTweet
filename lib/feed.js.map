{"version":3,"sources":["../public/scripts/feed.js"],"names":["window","friendlyPix","Feed","posts","newPosts","auth","firebase","$","document","ready","pageFeed","feedImageContainer","noPostsMessage","nextPageButton","newPostsButton","click","showNewPosts","postIds","Object","keys","i","length","hide","postData","post","Post","push","postElement","fillPostData","thumb_url","url","text","author","timestamp","thumb_storage_uri","full_storage_uri","full_url","existingPostElement","replaceWith","append","addClass","nextPage","unbind","loadMorePosts","prop","console","log","then","addPosts","data","entries","toggleNextPageButton","show","MaterialUtils","onEndScroll","postKeys","prepend","clear","getPosts","latestPostId","subscribeToGeneralFeed","postId","postValue","addNewPost","registerForPostsDeletion","onPostDeleted","currentUser","updateHomeFeeds","getHomeFeedPosts","fadeIn","subscribeToHomeFeed","startHomeFeedLiveUpdaters","nbNewPosts","remove","stopOnEndScrolls","cancelAllSubscriptions","forEach","feed"],"mappings":"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","file":"feed.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles the Home and Feed UI.\n */\nfriendlyPix.Feed = class {\n\n  /**\n   * Initializes the Friendly Pix feeds.\n   * @constructor\n   */\n  constructor() {\n    // List of all posts on the page.\n    this.posts = [];\n    // Map of posts that can be displayed.\n    this.newPosts = {};\n\n    // Firebase SDK.\n    this.auth = firebase.auth();\n\n    $(document).ready(() => {\n      // Pointers to DOM elements.\n      this.pageFeed = $('#page-feed');\n      this.feedImageContainer = $('.fp-image-container', this.pageFeed);\n      this.noPostsMessage = $('.fp-no-posts', this.pageFeed);\n      this.nextPageButton = $('.fp-next-page-button button');\n      this.newPostsButton = $('.fp-new-posts-button button');\n\n      // Event bindings.\n      this.newPostsButton.click(() => this.showNewPosts());\n    });\n  }\n\n  /**\n   * Appends the given list of `posts`.\n   */\n  addPosts(posts) {\n    // Displays the list of posts\n    const postIds = Object.keys(posts);\n    for (let i = postIds.length - 1; i >= 0; i--) {\n      this.noPostsMessage.hide();\n      const postData = posts[postIds[i]];\n      const post = new friendlyPix.Post();\n      this.posts.push(post);\n      const postElement = post.fillPostData(postIds[i], postData.thumb_url || postData.url,\n          postData.text, postData.author, postData.timestamp, postData.thumb_storage_uri,\n          postData.full_storage_uri, postData.full_url);\n      // If a post with similar ID is already in the feed we replace it instead of appending.\n      const existingPostElement = $(`.fp-post-${postIds[i]}`, this.feedImageContainer);\n      if (existingPostElement.length) {\n        existingPostElement.replaceWith(postElement);\n      } else {\n        this.feedImageContainer.append(postElement.addClass(`fp-post-${postIds[i]}`));\n      }\n    }\n  }\n\n  /**\n   * Shows the \"load next page\" button and binds it the `nextPage` callback. If `nextPage` is `null`\n   * then the button is hidden.\n   */\n  toggleNextPageButton(nextPage) {\n    this.nextPageButton.unbind('click');\n    if (nextPage) {\n      const loadMorePosts = () => {\n        this.nextPageButton.prop('disabled', true);\n        console.log('Loading next page of posts.');\n        nextPage().then(data => {\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n      };\n      this.nextPageButton.show();\n      // Enable infinite Scroll.\n      friendlyPix.MaterialUtils.onEndScroll(100).then(loadMorePosts);\n      this.nextPageButton.prop('disabled', false);\n      this.nextPageButton.click(loadMorePosts);\n    } else {\n      this.nextPageButton.hide();\n    }\n  }\n\n  /**\n   * Prepends the list of new posts stored in `this.newPosts`. This happens when the user clicks on\n   * the \"Show new posts\" button.\n   */\n  showNewPosts() {\n    const newPosts = this.newPosts;\n    this.newPosts = {};\n    this.newPostsButton.hide();\n    const postKeys = Object.keys(newPosts);\n\n    for (let i = 0; i < postKeys.length; i++) {\n      this.noPostsMessage.hide();\n      const post = newPosts[postKeys[i]];\n      const postElement = new friendlyPix.Post();\n      this.posts.push(postElement);\n      this.feedImageContainer.prepend(postElement.fillPostData(postKeys[i], post.thumb_url ||\n          post.url, post.text, post.author, post.timestamp, null, null, post.full_url));\n    }\n  }\n\n  /**\n   * Displays the general posts feed.\n   */\n  showGeneralFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    // Load initial batch of posts.\n    friendlyPix.firebase.getPosts().then(data => {\n      // Listen for new posts.\n      const latestPostId = Object.keys(data.entries)[Object.keys(data.entries).length - 1];\n      friendlyPix.firebase.subscribeToGeneralFeed(\n          (postId, postValue) => this.addNewPost(postId, postValue), latestPostId);\n\n      // Adds fetched posts and next page button if necessary.\n      this.addPosts(data.entries);\n      this.toggleNextPageButton(data.nextPage);\n    });\n\n    // Listen for posts deletions.\n    friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n  }\n\n  /**\n   * Shows the feed showing all followed users.\n   */\n  showHomeFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    if (this.auth.currentUser) {\n      // Make sure the home feed is updated with followed users's new posts.\n      friendlyPix.firebase.updateHomeFeeds().then(() => {\n        // Load initial batch of posts.\n        friendlyPix.firebase.getHomeFeedPosts().then(data => {\n          const postIds = Object.keys(data.entries);\n          if (postIds.length === 0) {\n            this.noPostsMessage.fadeIn();\n          }\n          // Listen for new posts.\n          const latestPostId = postIds[postIds.length - 1];\n          friendlyPix.firebase.subscribeToHomeFeed(\n              (postId, postValue) => {\n                this.addNewPost(postId, postValue);\n              }, latestPostId);\n\n          // Adds fetched posts and next page button if necessary.\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n\n        // Add new posts from followers live.\n        friendlyPix.firebase.startHomeFeedLiveUpdaters();\n\n        // Listen for posts deletions.\n        friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n      });\n    }\n  }\n\n  /**\n   * Triggered when a post has been deleted.\n   */\n  onPostDeleted(postId) {\n    // Potentially remove post from in-memory new post list.\n    if (this.newPosts[postId]) {\n      delete this.newPosts[postId];\n      const nbNewPosts = Object.keys(this.newPosts).length;\n      this.newPostsButton.text(`Display ${nbNewPosts} new posts`);\n      if (nbNewPosts === 0) {\n        this.newPostsButton.hide();\n      }\n    }\n\n    // Potentially delete from the UI.\n    $(`.fp-post-${postId}`, this.pageFeed).remove();\n  }\n\n  /**\n   * Adds a new post to display in the queue.\n   */\n  addNewPost(postId, postValue) {\n    this.newPosts[postId] = postValue;\n    this.newPostsButton.text(`Display ${Object.keys(this.newPosts).length} new posts`);\n    this.newPostsButton.show();\n  }\n\n  /**\n   * Clears the UI.\n   */\n  clear() {\n    // Delete the existing posts if any.\n    $('.fp-post', this.feedImageContainer).remove();\n\n    // Hides the \"next page\" and \"new posts\" buttons.\n    this.nextPageButton.hide();\n    this.newPostsButton.hide();\n\n    // Remove any click listener on the next page button.\n    this.nextPageButton.unbind('click');\n\n    // Stops then infinite scrolling listeners.\n    friendlyPix.MaterialUtils.stopOnEndScrolls();\n\n    // Clears the list of upcoming posts to display.\n    this.newPosts = {};\n\n    // Displays the help message for empty feeds.\n    this.noPostsMessage.hide();\n\n    // Remove Firebase listeners.\n    friendlyPix.firebase.cancelAllSubscriptions();\n\n    // Stops all timers if any.\n    this.posts.forEach(post => post.clear());\n    this.posts = [];\n  }\n};\n\nfriendlyPix.feed = new friendlyPix.Feed();\n"]}