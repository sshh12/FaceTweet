{"version":3,"sources":["../public/scripts/feed.js"],"names":["window","friendlyPix","Feed","posts","newPosts","auth","firebase","$","document","ready","pageFeed","feedImageContainer","noPostsMessage","nextPageButton","newPostsButton","click","showNewPosts","postIds","Object","keys","i","length","hide","postData","post","Post","push","postElement","fillPostData","thumb_url","url","text","author","timestamp","thumb_storage_uri","full_storage_uri","full_url","existingPostElement","replaceWith","append","addClass","nextPage","unbind","loadMorePosts","prop","console","log","then","addPosts","data","entries","toggleNextPageButton","show","MaterialUtils","onEndScroll","postKeys","prepend","clear","getPosts","latestPostId","subscribeToGeneralFeed","postId","postValue","addNewPost","registerForPostsDeletion","onPostDeleted","currentUser","updateHomeFeeds","getHomeFeedPosts","fadeIn","subscribeToHomeFeed","startHomeFeedLiveUpdaters","nbNewPosts","remove","stopOnEndScrolls","cancelAllSubscriptions","forEach","feed"],"mappings":"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","file":"feed.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles the Home and Feed UI.\n */\nfriendlyPix.Feed = class {\n\n  /**\n   * Initializes the Friendly Pix feeds.\n   * @constructor\n   */\n  constructor() {\n    // List of all posts on the page.\n    this.posts = [];\n    // Map of posts that can be displayed.\n    this.newPosts = {};\n\n    // Firebase SDK.\n    this.auth = firebase.auth();\n\n    $(document).ready(() => {\n      // Pointers to DOM elements.\n      this.pageFeed = $('#page-feed');\n      this.feedImageContainer = $('.fp-image-container', this.pageFeed);\n      this.noPostsMessage = $('.fp-no-posts', this.pageFeed);\n      this.nextPageButton = $('.fp-next-page-button button');\n      this.newPostsButton = $('.fp-new-posts-button button');\n\n      // Event bindings.\n      this.newPostsButton.click(() => this.showNewPosts());\n    });\n  }\n\n  /**\n   * Appends the given list of `posts`.\n   */\n  addPosts(posts) {\n    // Displays the list of posts\n    const postIds = Object.keys(posts);\n    for (let i = postIds.length - 1; i >= 0; i--) {\n      this.noPostsMessage.hide();\n      const postData = posts[postIds[i]];\n      const post = new friendlyPix.Post();\n      this.posts.push(post);\n      const postElement = post.fillPostData(postIds[i], postData.thumb_url || postData.url,\n          postData.text, postData.author, postData.timestamp, postData.thumb_storage_uri,\n          postData.full_storage_uri, postData.full_url);\n      // If a post with similar ID is already in the feed we replace it instead of appending.\n      const existingPostElement = $(`.fp-post-${postIds[i]}`, this.feedImageContainer);\n      if (existingPostElement.length) {\n        existingPostElement.replaceWith(postElement);\n      } else {\n        this.feedImageContainer.append(postElement.addClass(`fp-post-${postIds[i]}`));\n      }\n    }\n  }\n\n  /**\n   * Shows the \"load next page\" button and binds it the `nextPage` callback. If `nextPage` is `null`\n   * then the button is hidden.\n   */\n  toggleNextPageButton(nextPage) {\n    this.nextPageButton.unbind('click');\n    if (nextPage) {\n      const loadMorePosts = () => {\n        this.nextPageButton.prop('disabled', true);\n        console.log('Loading next page of posts.');\n        nextPage().then(data => {\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n      };\n      this.nextPageButton.show();\n      // Enable infinite Scroll.\n      friendlyPix.MaterialUtils.onEndScroll(100).then(loadMorePosts);\n      this.nextPageButton.prop('disabled', false);\n      this.nextPageButton.click(loadMorePosts);\n    } else {\n      this.nextPageButton.hide();\n    }\n  }\n\n  /**\n   * Prepends the list of new posts stored in `this.newPosts`. This happens when the user clicks on\n   * the \"Show new posts\" button.\n   */\n  showNewPosts() {\n    const newPosts = this.newPosts;\n    this.newPosts = {};\n    this.newPostsButton.hide();\n    const postKeys = Object.keys(newPosts);\n\n    for (let i = 0; i < postKeys.length; i++) {\n      this.noPostsMessage.hide();\n      const post = newPosts[postKeys[i]];\n      const postElement = new friendlyPix.Post();\n      this.posts.push(postElement);\n      this.feedImageContainer.prepend(postElement.fillPostData(postKeys[i], post.thumb_url ||\n          post.url, post.text, post.author, post.timestamp, null, null, post.full_url));\n    }\n  }\n\n  /**\n   * Displays the general posts feed.\n   */\n  showGeneralFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    // Load initial batch of posts.\n    friendlyPix.firebase.getPosts().then(data => {\n      // Listen for new posts.\n      const latestPostId = Object.keys(data.entries)[Object.keys(data.entries).length - 1];\n      friendlyPix.firebase.subscribeToGeneralFeed(\n          (postId, postValue) => this.addNewPost(postId, postValue), latestPostId);\n\n      // Adds fetched posts and next page button if necessary.\n      this.addPosts(data.entries);\n      this.toggleNextPageButton(data.nextPage);\n    });\n\n    // Listen for posts deletions.\n    friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n  }\n\n  /**\n   * Shows the feed showing all followed users.\n   */\n  showHomeFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    if (this.auth.currentUser) {\n      // Make sure the home feed is updated with followed users's new posts.\n      friendlyPix.firebase.updateHomeFeeds().then(() => {\n        // Load initial batch of posts.\n        friendlyPix.firebase.getHomeFeedPosts().then(data => {\n          const postIds = Object.keys(data.entries);\n          if (postIds.length === 0) {\n            this.noPostsMessage.fadeIn();\n          }\n          // Listen for new posts.\n          const latestPostId = postIds[postIds.length - 1];\n          friendlyPix.firebase.subscribeToHomeFeed(\n              (postId, postValue) => {\n                this.addNewPost(postId, postValue);\n              }, latestPostId);\n\n          // Adds fetched posts and next page button if necessary.\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n\n        // Add new posts from followers live.\n        friendlyPix.firebase.startHomeFeedLiveUpdaters();\n\n        // Listen for posts deletions.\n        friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n      });\n    }\n  }\n\n  /**\n   * Triggered when a post has been deleted.\n   */\n  onPostDeleted(postId) {\n    // Potentially remove post from in-memory new post list.\n    if (this.newPosts[postId]) {\n      delete this.newPosts[postId];\n      const nbNewPosts = Object.keys(this.newPosts).length;\n      this.newPostsButton.text(`Display ${nbNewPosts} new posts`);\n      if (nbNewPosts === 0) {\n        this.newPostsButton.hide();\n      }\n    }\n\n    // Potentially delete from the UI.\n    $(`.fp-post-${postId}`, this.pageFeed).remove();\n  }\n\n  /**\n   * Adds a new post to display in the queue.\n   */\n  addNewPost(postId, postValue) {\n    this.newPosts[postId] = postValue;\n    this.newPostsButton.text(`Display ${Object.keys(this.newPosts).length} new posts`);\n    this.newPostsButton.show();\n  }\n\n  /**\n   * Clears the UI.\n   */\n  clear() {\n    // Delete the existing posts if any.\n    $('.fp-post', this.feedImageContainer).remove();\n\n    // Hides the \"next page\" and \"new posts\" buttons.\n    this.nextPageButton.hide();\n    this.newPostsButton.hide();\n\n    // Remove any click listener on the next page button.\n    this.nextPageButton.unbind('click');\n\n    // Stops then infinite scrolling listeners.\n    friendlyPix.MaterialUtils.stopOnEndScrolls();\n\n    // Clears the list of upcoming posts to display.\n    this.newPosts = {};\n\n    // Displays the help message for empty feeds.\n    this.noPostsMessage.hide();\n\n    // Remove Firebase listeners.\n    friendlyPix.firebase.cancelAllSubscriptions();\n\n    // Stops all timers if any.\n    this.posts.forEach(post => post.clear());\n    this.posts = [];\n  }\n};\n\nfriendlyPix.feed = new friendlyPix.Feed();\n"]}