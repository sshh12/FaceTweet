{"version":3,"sources":["../public/scripts/firebase.js"],"names":["window","friendlyPix","Firebase","database","firebase","storage","auth","firebaseRefs","forEach","ref","off","postId","callback","latestCommentId","_subscribeToFeed","_getPaginatedFeed","COMMENTS_PAGE_SIZE","latestPostId","POSTS_PAGE_SIZE","currentUser","uid","USER_PAGE_POSTS_PAGE_SIZE","uri","latestEntryId","fetchPostDetails","feedRef","orderByKey","startAt","on","feedData","key","val","once","then","postData","push","pageSize","earliestEntryId","console","log","endAt","limitToLast","entries","data","nextPage","entryIds","Object","keys","length","nextPageStartingId","shift","queries","map","getPostData","Promise","all","deleteOps","results","result","deleteFromFeed","followingRef","followedUid","followingData","followedUserPostsRef","String","updates","update","followedUserId","following","updateOperations","lastSyncedPostId","searchString","maxResults","latinize","toLowerCase","query","orderByChild","limitToFirst","reversedQuery","people","userIds","name","userId","_search_index","full_name","reversedName","reversed_full_name","startsWith","imageUrl","displayName","searchFullName","searchReversedFullName","split","reverse","join","e","error","updateData","profile_picture","likesRef","value","set","ServerValue","TIMESTAMP","commentText","commentObject","text","timestamp","author","photoURL","commentId","remove","pic","thumb","fileName","newPostKey","picRef","metadata","contentType","type","picUploadTask","put","snapshot","totalBytes","url","downloadURLs","catch","thumbRef","tumbUploadTask","full_url","urls","thumb_url","full_storage_uri","toString","thumb_storage_uri","follow","lastPostId","post","followStatusRef","checked","token","likesCallback","numChildren","commentsCallback","commentsRef","followersCallback","followersRef","followingCallback","followingUids","fetchProfileDetailsOperations","loadUserProfile","followingUid","profiles","postsCallback","userPostsRef","picStorageUri","thumbStorageUri","updateObj","deleteFromDatabase","deletePicFromStorage","refFromURL","delete","deleteThumbFromStorage","deletionCallback","postsRef"],"mappings":"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","file":"firebase.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles all Firebase interactions.\n */\nfriendlyPix.Firebase = class {\n  /**\n   * Number of posts loaded initially and per page for the feeds.\n   * @return {number}\n   */\n  static get POSTS_PAGE_SIZE() {\n    return 5;\n  }\n\n  /**\n   * Number of posts loaded initially and per page for the User Profile page.\n   * @return {number}\n   */\n  static get USER_PAGE_POSTS_PAGE_SIZE() {\n    return 6;\n  }\n\n  /**\n   * Number of posts comments loaded initially and per page.\n   * @return {number}\n   */\n  static get COMMENTS_PAGE_SIZE() {\n    return 3;\n  }\n\n  /**\n   * Initializes this Firebase facade.\n   * @constructor\n   */\n  constructor() {\n    // Firebase SDK.\n    this.database = firebase.database();\n    this.storage = firebase.storage();\n    this.auth = firebase.auth();\n\n    // Firebase references that are listened to.\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Turns off all Firebase listeners.\n   */\n  cancelAllSubscriptions() {\n    this.firebaseRefs.forEach(ref => ref.off());\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Subscribes to receive updates from a post's comments. The given `callback` function gets\n   * called for each new comment to the post with ID `postId`.\n   *\n   * If provided we'll only listen to comments that were posted after `latestCommentId`.\n   */\n  subscribeToComments(postId, callback, latestCommentId) {\n    return this._subscribeToFeed(`/comments/${postId}`, callback, latestCommentId, false);\n  }\n\n  /**\n   * Paginates comments from the post with ID `postId`.\n   *\n   * Fetches a page of `COMMENTS_PAGE_SIZE` comments from the post.\n   *\n   * We return a `Promise` which resolves with an Map of comments and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getComments(postId) {\n    return this._getPaginatedFeed(`/comments/${postId}`,\n        friendlyPix.Firebase.COMMENTS_PAGE_SIZE, null, false);\n  }\n\n  /**\n   * Subscribes to receive updates to the general posts feed. The given `callback` function gets\n   * called for each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToGeneralFeed(callback, latestPostId) {\n    return this._subscribeToFeed('/posts/', callback, latestPostId);\n  }\n\n  /**\n   * Paginates posts from the global post feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the global feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getPosts() {\n    return this._getPaginatedFeed('/posts/', friendlyPix.Firebase.POSTS_PAGE_SIZE);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToHomeFeed(callback, latestPostId) {\n    return this._subscribeToFeed(`/feed/${this.auth.currentUser.uid}`, callback, latestPostId,\n        true);\n  }\n\n  /**\n   * Paginates posts from the user's home feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the user's home feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getHomeFeedPosts() {\n    return this._getPaginatedFeed(`/feed/${this.auth.currentUser.uid}`,\n        friendlyPix.Firebase.POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToUserFeed(uid, callback, latestPostId) {\n    return this._subscribeToFeed(`/people/${uid}/posts`, callback,\n        latestPostId, true);\n  }\n\n  /**\n   * Paginates posts from the user's posts feed.\n   *\n   * Fetches a page of `USER_PAGE_POSTS_PAGE_SIZE` posts from the user's posts feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getUserFeedPosts(uid) {\n    return this._getPaginatedFeed(`/people/${uid}/posts`,\n        friendlyPix.Firebase.USER_PAGE_POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the given feed. The given `callback` function gets called\n   * for each new entry on the given feed.\n   *\n   * If provided we'll only listen to entries that were posted after `latestEntryId`. This allows to\n   * listen only for new feed entries after fetching existing entries using `_getPaginatedFeed()`.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds.\n   * @private\n   */\n  _subscribeToFeed(uri, callback, latestEntryId = null, fetchPostDetails = false) {\n    // Load all posts information.\n    let feedRef = this.database.ref(uri);\n    if (latestEntryId) {\n      feedRef = feedRef.orderByKey().startAt(latestEntryId);\n    }\n    feedRef.on('child_added', feedData => {\n      if (feedData.key !== latestEntryId) {\n        if (!fetchPostDetails) {\n          callback(feedData.key, feedData.val());\n        } else {\n          this.database.ref(`/posts/${feedData.key}`).once('value').then(\n              postData => callback(postData.key, postData.val()));\n        }\n      }\n    });\n    this.firebaseRefs.push(feedRef);\n  }\n\n  /**\n   * Paginates entries from the given feed.\n   *\n   * Fetches a page of `pageSize` entries from the given feed.\n   *\n   * If provided we'll return entries that were posted before (and including) `earliestEntryId`.\n   *\n   * We return a `Promise` which resolves with an Map of entries and a function to the next page or\n   * `null` if there is no next page.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds like the user\n   * home feed and the user post feed.\n   * @private\n   */\n  _getPaginatedFeed(uri, pageSize, earliestEntryId = null, fetchPostDetails = false) {\n    console.log('Fetching entries from', uri, 'start at', earliestEntryId, 'page size', pageSize);\n    let ref = this.database.ref(uri);\n    if (earliestEntryId) {\n      ref = ref.orderByKey().endAt(earliestEntryId);\n    }\n    // We're fetching an additional item as a cheap way to test if there is a next page.\n    return ref.limitToLast(pageSize + 1).once('value').then(data => {\n      const entries = data.val() || {};\n\n      // Figure out if there is a next page.\n      let nextPage = null;\n      const entryIds = Object.keys(entries);\n      if (entryIds.length > pageSize) {\n        delete entries[entryIds[0]];\n        const nextPageStartingId = entryIds.shift();\n        nextPage = () => this._getPaginatedFeed(\n            uri, pageSize, nextPageStartingId, fetchPostDetails);\n      }\n      if (fetchPostDetails) {\n        // Fetch details of all posts.\n        const queries = entryIds.map(postId => this.getPostData(postId));\n        // Since all the requests are being done one the same feed it's unlikely that a single one\n        // would fail and not the others so using Promise.all() is not so risky.\n        return Promise.all(queries).then(results => {\n          const deleteOps = [];\n          results.forEach(result => {\n            if (result.val()) {\n              entries[result.key] = result.val();\n            } else {\n              // We encountered a deleted post. Removing permanently from the feed.\n              delete entries[result.key];\n              deleteOps.push(this.deleteFromFeed(uri, result.key));\n            }\n          });\n          if (deleteOps.length > 0) {\n            // We had to remove some deleted posts from the feed. Lets run the query again to get\n            // the correct number of posts.\n            return this._getPaginatedFeed(uri, pageSize, earliestEntryId, fetchPostDetails);\n          }\n          return {entries: entries, nextPage: nextPage};\n        });\n      }\n      return {entries: entries, nextPage: nextPage};\n    });\n  }\n\n  /**\n   * Keeps the home feed populated with latest followed users' posts live.\n   */\n  startHomeFeedLiveUpdaters() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    this.firebaseRefs.push(followingRef);\n    followingRef.on('child_added', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const followedUid = followingData.key;\n      let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n      if (followingData.val() instanceof String) {\n        followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(followingData.val());\n      }\n      this.firebaseRefs.push(followedUserPostsRef);\n      followedUserPostsRef.on('child_added', postData => {\n        if (postData.key !== followingData.val()) {\n          const updates = {};\n          updates[`/feed/${this.auth.currentUser.uid}/${postData.key}`] = true;\n          updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postData.key;\n          this.database.ref().update(updates);\n        }\n      });\n    });\n    // Stop listening to users we unfollow.\n    followingRef.on('child_removed', followingData => {\n      // Stop listening the followed user's posts to populate the home feed.\n      const followedUserId = followingData.key;\n      this.database.ref(`/people/${followedUserId}/posts`).off();\n    });\n  }\n\n  /**\n   * Updates the home feed with new followed users' posts and returns a promise once that's done.\n   */\n  updateHomeFeeds() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    return followingRef.once('value', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const following = followingData.val();\n      if (!following) {\n        return;\n      }\n      const updateOperations = Object.keys(following).map(followedUid => {\n        let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n        const lastSyncedPostId = following[followedUid];\n        if (lastSyncedPostId instanceof String) {\n          followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(lastSyncedPostId);\n        }\n        return followedUserPostsRef.once('value', postData => {\n          const updates = {};\n          if (!postData.val()) {\n            return;\n          }\n          Object.keys(postData.val()).forEach(postId => {\n            if (postId !== lastSyncedPostId) {\n              updates[`/feed/${this.auth.currentUser.uid}/${postId}`] = true;\n              updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postId;\n            }\n          });\n          return this.database.ref().update(updates);\n        });\n      });\n      return Promise.all(updateOperations);\n    });\n  }\n\n  /**\n   * Returns the users which name match the given search query as a Promise.\n   */\n  searchUsers(searchString, maxResults) {\n    searchString = latinize(searchString).toLowerCase();\n    const query = this.database.ref('/people')\n        .orderByChild('_search_index/full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    const reversedQuery = this.database.ref('/people')\n        .orderByChild('_search_index/reversed_full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    return Promise.all([query, reversedQuery]).then(results => {\n      const people = {};\n      // construct people from the two search queries results.\n      results.forEach(result => result.forEach(data => {\n        people[data.key] = data.val();\n      }));\n\n      // Remove results that do not start with the search query.\n      const userIds = Object.keys(people);\n      userIds.forEach(userId => {\n        const name = people[userId]._search_index.full_name;\n        const reversedName = people[userId]._search_index.reversed_full_name;\n        if (!name.startsWith(searchString) && !reversedName.startsWith(searchString)) {\n          delete people[userId];\n        }\n      });\n      return people;\n    });\n  }\n\n  /**\n   * Saves or updates public user data in Firebase (such as image URL, display name...).\n   */\n  saveUserData(imageUrl, displayName) {\n    if (!displayName) {\n      displayName = 'Anonymous';\n    }\n    let searchFullName = displayName.toLowerCase();\n    let searchReversedFullName = searchFullName.split(' ').reverse().join(' ');\n    try {\n      searchFullName = latinize(searchFullName);\n      searchReversedFullName = latinize(searchReversedFullName);\n    } catch (e) {\n      console.error(e);\n    }\n\n    const updateData = {\n      profile_picture: imageUrl,\n      full_name: displayName,\n      _search_index: {\n        full_name: searchFullName,\n        reversed_full_name: searchReversedFullName\n      }\n    };\n    return this.database.ref(`people/${this.auth.currentUser.uid}`).update(updateData);\n  }\n\n  /**\n   * Fetches a single post data.\n   */\n  getPostData(postId) {\n    return this.database.ref(`/posts/${postId}`).once('value');\n  }\n\n  /**\n   * Subscribe to receive updates on a user's post like status.\n   */\n  registerToUserLike(postId, callback) {\n    // Load and listen to new Likes.\n    const likesRef = this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`);\n    likesRef.on('value', data => callback(!!data.val()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Updates the like status of a post from the current user.\n   */\n  updateLike(postId, value) {\n    return this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`)\n        .set(value ? firebase.database.ServerValue.TIMESTAMP : null);\n  }\n\n  /**\n   * Adds a comment to a post.\n   */\n  addComment(postId, commentText) {\n    const commentObject = {\n      text: commentText,\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      author: {\n        uid: this.auth.currentUser.uid,\n        full_name: this.auth.currentUser.displayName,\n        profile_picture: this.auth.currentUser.photoURL\n      }\n    };\n    return this.database.ref(`comments/${postId}`).push(commentObject);\n  }\n\n  /**\n   * Deletes a comment.\n   */\n  deleteComment(postId, commentId) {\n    return this.database.ref(`/comments/${postId}/${commentId}`).remove();\n  }\n\n  /**\n   * Edit a comment.\n   */\n  editComment(postId, commentId, commentText) {\n    return this.database.ref(`/comments/${postId}/${commentId}`).update({\n      text: commentText,\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  }\n\n  /**\n   * Uploads a new Picture to Cloud Storage and adds a new post referencing it.\n   * This returns a Promise which completes with the new Post ID.\n   */\n  uploadNewPic(pic, thumb, fileName, text) {\n    // Get a reference to where the post will be created.\n    const newPostKey = this.database.ref('/posts').push().key;\n\n    // Start the pic file upload to Cloud Storage.\n    const picRef = this.storage.ref(`${this.auth.currentUser.uid}/full/${newPostKey}/${fileName}`);\n    const metadata = {\n      contentType: pic.type\n    };\n    var picUploadTask = picRef.put(pic, metadata).then(snapshot => {\n      console.log('New pic uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      var url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new pic', error);\n    });\n\n    // Start the thumb file upload to Cloud Storage.\n    const thumbRef = this.storage.ref(`${this.auth.currentUser.uid}/thumb/${newPostKey}/${fileName}`);\n    var tumbUploadTask = thumbRef.put(thumb, metadata).then(snapshot => {\n      console.log('New thumb uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      var url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new thumb', error);\n    });\n\n    return Promise.all([picUploadTask, tumbUploadTask]).then(urls => {\n      // Once both pics and thumbnails has been uploaded add a new post in the Firebase Database and\n      // to its fanned out posts lists (user's posts and home post).\n      const update = {};\n      update[`/posts/${newPostKey}`] = {\n        full_url: urls[0],\n        thumb_url: urls[1],\n        text: text,\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        full_storage_uri: picRef.toString(),\n        thumb_storage_uri: thumbRef.toString(),\n        author: {\n          uid: this.auth.currentUser.uid,\n          full_name: this.auth.currentUser.displayName,\n          profile_picture: this.auth.currentUser.photoURL\n        }\n      };\n      update[`/people/${this.auth.currentUser.uid}/posts/${newPostKey}`] = true;\n      update[`/feed/${this.auth.currentUser.uid}/${newPostKey}`] = true;\n      return this.database.ref().update(update).then(() => newPostKey);\n    });\n  }\n\n  /**\n   * Follow/Unfollow a user and return a promise once that's done.\n   *\n   * If the user is now followed we'll add all his posts to the home feed of the follower.\n   * If the user is now not followed anymore all his posts are removed from the follower home feed.\n   */\n  toggleFollowUser(followedUserId, follow) {\n    // Add or remove posts to the user's home feed.\n    return this.database.ref(`/people/${followedUserId}/posts`).once('value').then(\n        data => {\n          const updateData = {};\n          let lastPostId = true;\n\n          // Add/remove followed user's posts to the home feed.\n          data.forEach(post => {\n            updateData[`/feed/${this.auth.currentUser.uid}/${post.key}`] = follow ? !!follow : null;\n            lastPostId = post.key;\n          });\n\n          // Add/remove followed user to the 'following' list.\n          updateData[`/people/${this.auth.currentUser.uid}/following/${followedUserId}`] =\n              follow ? lastPostId : null;\n\n          // Add/remove signed-in user to the list of followers.\n          updateData[`/followers/${followedUserId}/${this.auth.currentUser.uid}`] =\n              follow ? !!follow : null;\n          return this.database.ref().update(updateData);\n        });\n  }\n\n  /**\n   * Listens to updates on the followed status of the given user.\n   */\n  registerToFollowStatusUpdate(userId, callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/following/${userId}`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Enables or disables the notifications for that user.\n   */\n  toggleNotificationEnabled(checked) {\n    return this.database.ref(`/people/${this.auth.currentUser.uid}/notificationEnabled`)\n        .set(checked ? checked : null);\n  }\n\n  /**\n   * Saves the given notification token.\n   */\n  saveNotificationToken(token) {\n    return this.database.ref(`/people/${this.auth.currentUser.uid}/notificationTokens/${token}`)\n        .set(true);\n  }\n\n  /**\n   * Listens to updates on the Enable notifications status of the current user.\n   */\n  registerToNotificationEnabledStatusUpdate(callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/notificationEnabled`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Load a single user profile information\n   */\n  loadUserProfile(uid) {\n    return this.database.ref(`/people/${uid}`).once('value');\n  }\n\n  /**\n   * Listens to updates on the likes of a post and calls the callback with likes counts.\n   * TODO: This won't scale if a user has a huge amount of likes. We need to keep track of a\n   *       likes count instead.\n   */\n  registerForLikesCount(postId, likesCallback) {\n    const likesRef = this.database.ref(`/likes/${postId}`);\n    likesRef.on('value', data => likesCallback(data.numChildren()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Listens to updates on the comments of a post and calls the callback with comments counts.\n   */\n  registerForCommentsCount(postId, commentsCallback) {\n    const commentsRef = this.database.ref(`/comments/${postId}`);\n    commentsRef.on('value', data => commentsCallback(data.numChildren()));\n    this.firebaseRefs.push(commentsRef);\n  }\n\n  /**\n   * Listens to updates on the followers of a person and calls the callback with followers counts.\n   * TODO: This won't scale if a user has a huge amount of followers. We need to keep track of a\n   *       follower count instead.\n   */\n  registerForFollowersCount(uid, followersCallback) {\n    const followersRef = this.database.ref(`/followers/${uid}`);\n    followersRef.on('value', data => followersCallback(data.numChildren()));\n    this.firebaseRefs.push(followersRef);\n  }\n\n  /**\n   * Listens to updates on the followed people of a person and calls the callback with its count.\n   */\n  registerForFollowingCount(uid, followingCallback) {\n    const followingRef = this.database.ref(`/people/${uid}/following`);\n    followingRef.on('value', data => followingCallback(data.numChildren()));\n    this.firebaseRefs.push(followingRef);\n  }\n\n  /**\n   * Listens for changes of the thumbnail URL of a given post.\n   */\n  registerForThumbChanges(postId, callback) {\n    const thumbRef = this.database.ref(`/posts/${postId}/thumb_url`);\n    thumbRef.on('value', data => callback(data.val()));\n    this.firebaseRefs.push(thumbRef);\n  }\n\n  /**\n   * Fetch the list of followed people's profile.\n   */\n  getFollowingProfiles(uid) {\n    return this.database.ref(`/people/${uid}/following`).once('value').then(data => {\n      if (data.val()) {\n        const followingUids = Object.keys(data.val());\n        const fetchProfileDetailsOperations = followingUids.map(\n          followingUid => this.loadUserProfile(followingUid));\n        return Promise.all(fetchProfileDetailsOperations).then(results => {\n          const profiles = {};\n          results.forEach(result => {\n            if (result.val()) {\n              profiles[result.key] = result.val();\n            }\n          });\n          return profiles;\n        });\n      }\n      return {};\n    });\n  }\n\n  /**\n   * Listens to updates on the user's posts and calls the callback with user posts counts.\n   */\n  registerForPostsCount(uid, postsCallback) {\n    const userPostsRef = this.database.ref(`/people/${uid}/posts`);\n    userPostsRef.on('value', data => postsCallback(data.numChildren()));\n    this.firebaseRefs.push(userPostsRef);\n  }\n\n  /**\n   * Deletes the given post from the global post feed and the user's post feed. Also deletes\n   * comments, likes and the file on Cloud Storage.\n   */\n  deletePost(postId, picStorageUri, thumbStorageUri) {\n    console.log(`Deleting ${postId}`);\n    const updateObj = {};\n    updateObj[`/people/${this.auth.currentUser.uid}/posts/${postId}`] = null;\n    updateObj[`/comments/${postId}`] = null;\n    updateObj[`/likes/${postId}`] = null;\n    updateObj[`/posts/${postId}`] = null;\n    updateObj[`/feed/${this.auth.currentUser.uid}/${postId}`] = null;\n    const deleteFromDatabase = this.database.ref().update(updateObj);\n    if (picStorageUri) {\n      const deletePicFromStorage = this.storage.refFromURL(picStorageUri).delete();\n      const deleteThumbFromStorage = this.storage.refFromURL(thumbStorageUri).delete();\n      return Promise.all([deleteFromDatabase, deletePicFromStorage, deleteThumbFromStorage]);\n    }\n    return deleteFromDatabase;\n  }\n\n  /**\n   * Deletes the given postId entry from the user's home feed.\n   */\n  deleteFromFeed(uri, postId) {\n    return this.database.ref(`${uri}/${postId}`).remove();\n  }\n\n  /**\n   * Listens to deletions on posts from the global feed.\n   */\n  registerForPostsDeletion(deletionCallback) {\n    const postsRef = this.database.ref(`/posts`);\n    postsRef.on('child_removed', data => deletionCallback(data.key));\n    this.firebaseRefs.push(postsRef);\n  }\n};\n\nfriendlyPix.firebase = new friendlyPix.Firebase();\n"]}